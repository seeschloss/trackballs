/* cpp arguments: guile.cc -DLOCALEDIR="/usr/local/share/locale" -DHAVE_CONFIG_H -I. -I.. -DSHARE_DIR="/usr/local/share/trackballs" -DPACKAGE="trackballs" -DVERSION="1.1.4" -g -O2 -I/usr/include/SDL -D_GNU_SOURCE=1 -D_REENTRANT -I./ -I../ */
 scm_c_define_gsubr (s_player, 0, 0, 0, (SCM (*)()) player); ;
 scm_c_define_gsubr (s_new_mr_black, 2, 0, 0, (SCM (*)()) new_mr_black); ;
 scm_c_define_gsubr (s_new_baby, 2, 0, 0, (SCM (*)()) new_baby); ;
 scm_c_define_gsubr (s_add_teleport, 5, 0, 0, (SCM (*)()) add_teleport); ;
 scm_c_define_gsubr (s_add_bird, 6, 0, 0, (SCM (*)()) add_bird); ;
 scm_c_define_gsubr (s_add_flag, 5, 0, 0, (SCM (*)()) add_flag); ;
 scm_c_define_gsubr (s_add_colormodifier, 7, 0, 0, (SCM (*)()) add_colormodifier); ;
 scm_c_define_gsubr (s_add_heightmodifier, 7, 3, 0, (SCM (*)()) add_heightmodifier); ;
 scm_c_define_gsubr (s_add_cactus, 3, 0, 0, (SCM (*)()) add_cactus); ;
 scm_c_define_gsubr (s_add_spike, 4, 0, 0, (SCM (*)()) add_spike); ;
 scm_c_define_gsubr (s_add_sidespike, 5, 0, 0, (SCM (*)()) add_sidespike); ;
 scm_c_define_gsubr (s_add_goal, 4, 0, 0, (SCM (*)()) add_goal); ;
 scm_c_define_gsubr (s_sign, 6, 1, 0, (SCM (*)()) sign); ;
 scm_c_define_gsubr (s_add_modpill, 5, 0, 0, (SCM (*)()) add_modpill); ;
 scm_c_define_gsubr (s_forcefield, 8, 0, 0, (SCM (*)()) forcefield); ;
 scm_c_define_gsubr (s_fun_switch, 4, 0, 0, (SCM (*)()) fun_switch); ;
 scm_c_define_gsubr (s_new_pipe, 7, 0, 0, (SCM (*)()) new_pipe); ;
 scm_c_define_gsubr (s_pipe_connector, 4, 0, 0, (SCM (*)()) pipe_connector); ;
 scm_c_define_gsubr (s_diamond, 2, 1, 0, (SCM (*)()) diamond); ;
 scm_c_define_gsubr (s_fountain, 6, 0, 0, (SCM (*)()) fountain); ;
 scm_c_define_gsubr (s_set_position, 3, 1, 0, (SCM (*)()) set_position); ;
 scm_c_define_gsubr (s_get_position_x, 1, 0, 0, (SCM (*)()) get_position_x); ;
 scm_c_define_gsubr (s_get_position_y, 1, 0, 0, (SCM (*)()) get_position_y); ;
 scm_c_define_gsubr (s_get_position_z, 1, 0, 0, (SCM (*)()) get_position_z); ;
 scm_c_define_gsubr (s_set_modtime, 3, 0, 0, (SCM (*)()) set_modtime); ;
 scm_c_define_gsubr (s_set_acceleration, 2, 0, 0, (SCM (*)()) set_acceleration); ;
 scm_c_define_gsubr (s_set_horizon, 2, 0, 0, (SCM (*)()) set_horizon); ;
 scm_c_define_gsubr (s_set_primary_color, 4, 1, 0, (SCM (*)()) set_primary_color); ;
 scm_c_define_gsubr (s_set_secondary_color, 4, 1, 0, (SCM (*)()) set_secondary_color); ;
 scm_c_define_gsubr (s_set_specular_color, 4, 1, 0, (SCM (*)()) set_specular_color); ;
 scm_c_define_gsubr (s_set_flag, 3, 0, 0, (SCM (*)()) set_flag); ;
 scm_c_define_gsubr (s_set_wind, 3, 0, 0, (SCM (*)()) set_wind); ;
 scm_c_define_gsubr (s_set_speed, 2, 0, 0, (SCM (*)()) set_speed); ;
 scm_c_define_gsubr (s_set_texture, 2, 0, 0, (SCM (*)()) set_texture); ;
 scm_c_define_gsubr (s_set_fountain_strength, 2, 0, 0, (SCM (*)()) set_fountain_strength); ;
 scm_c_define_gsubr (s_set_fountain_velocity, 4, 0, 0, (SCM (*)()) set_fountain_velocity); ;
 scm_c_define_gsubr (s_score_on_death, 2, 0, 0, (SCM (*)()) score_on_death); ;
 scm_c_define_gsubr (s_time_on_death, 2, 0, 0, (SCM (*)()) time_on_death); ;
 scm_c_define_gsubr (s_default_on_death, 3, 0, 0, (SCM (*)()) default_on_death); ;
 scm_c_define_gsubr (s_add_cyclic_platform, 8, 0, 0, (SCM (*)()) add_cyclic_platform); ;
 scm_c_define_gsubr (s_animator, 7, 0, 0, (SCM (*)()) animator); ;
 scm_c_define_gsubr (s_set_onoff, 2, 0, 0, (SCM (*)()) set_onoff); ;
 scm_c_define_gsubr (s_animator_value, 1, 0, 0, (SCM (*)()) animator_value); ;
 scm_c_define_gsubr (s_set_animator_direction, 2, 0, 0, (SCM (*)()) set_animator_direction); ;
 scm_c_define_gsubr (s_set_animator_position, 2, 0, 0, (SCM (*)()) set_animator_position); ;
 scm_c_define_gsubr (s_day, 0, 0, 0, (SCM (*)()) day); ;
 scm_c_define_gsubr (s_night, 0, 0, 0, (SCM (*)()) night); ;
 scm_c_define_gsubr (s_fog, 0, 1, 0, (SCM (*)()) fog); ;
 scm_c_define_gsubr (s_thick_fog, 0, 0, 0, (SCM (*)()) thick_fog); ;
 scm_c_define_gsubr (s_fog_color, 3, 0, 0, (SCM (*)()) fog_color); ;
 scm_c_define_gsubr (s_set_bonus_level, 1, 0, 0, (SCM (*)()) set_bonus_level); ;
 scm_c_define_gsubr (s_set_track_name, 1, 0, 0, (SCM (*)()) set_track_name); ;
 scm_c_define_gsubr (s_set_author, 1, 0, 0, (SCM (*)()) set_author); ;
 scm_c_define_gsubr (s_start_time, 1, 0, 0, (SCM (*)()) start_time); ;
 scm_c_define_gsubr (s_set_time, 1, 0, 0, (SCM (*)()) set_time); ;
 scm_c_define_gsubr (s_get_time, 0, 0, 0, (SCM (*)()) get_time); ;
 scm_c_define_gsubr (s_add_time, 1, 0, 0, (SCM (*)()) add_time); ;
 scm_c_define_gsubr (s_set_score, 1, 0, 0, (SCM (*)()) set_score); ;
 scm_c_define_gsubr (s_get_score, 0, 0, 0, (SCM (*)()) get_score); ;
 scm_c_define_gsubr (s_add_score, 1, 0, 0, (SCM (*)()) add_score); ;
 scm_c_define_gsubr (s_set_start_position, 2, 0, 0, (SCM (*)()) set_start_position); ;
 scm_c_define_gsubr (s_snow, 1, 0, 0, (SCM (*)()) snow); ;
 scm_c_define_gsubr (s_rain, 1, 0, 0, (SCM (*)()) rain); ;
 scm_c_define_gsubr (s_difficulty, 0, 0, 0, (SCM (*)()) difficulty); ;
 scm_c_define_gsubr (s_use_grid, 1, 0, 0, (SCM (*)()) use_grid); ;
 scm_c_define_gsubr (s_map_is_transparent, 1, 0, 0, (SCM (*)()) map_is_transparent); ;
 scm_c_define_gsubr (s_jump, 1, 0, 0, (SCM (*)()) jump); ;
 scm_c_define_gsubr (s_scale_oxygen, 1, 0, 0, (SCM (*)()) scale_oxygen); ;
 scm_c_define_gsubr (s_set_cell_flag, 6, 0, 0, (SCM (*)()) set_cell_flag); ;
 scm_c_define_gsubr (s_set_cell_velocity, 6, 0, 0, (SCM (*)()) set_cell_velocity); ;
 scm_c_define_gsubr (s_set_cell_heights, 8, 1, 0, (SCM (*)()) set_cell_heights); ;
 scm_c_define_gsubr (s_set_cell_water_heights, 8, 1, 0, (SCM (*)()) set_cell_water_heights); ;
 scm_c_define_gsubr (s_set_cell_colors, 8, 1, 0, (SCM (*)()) set_cell_colors); ;
 scm_c_define_gsubr (s_set_cell_wall_colors, 8, 1, 0, (SCM (*)()) set_cell_wall_colors); ;
 scm_c_define_gsubr (s_play_effect, 1, 0, 0, (SCM (*)()) play_effect); ;
 scm_c_define_gsubr (s_camera_angle, 2, 0, 0, (SCM (*)()) camera_angle); ;
 scm_c_define_gsubr (s_restart_time, 1, 0, 0, (SCM (*)()) restart_time); ;
 scm_c_define_gsubr (s_clear_song_preferences, 0, 0, 0, (SCM (*)()) clear_song_preferences); ;
 scm_c_define_gsubr (s_force_next_song, 0, 0, 0, (SCM (*)()) force_next_song); ;
 scm_c_define_gsubr (s_set_song_preference, 2, 0, 0, (SCM (*)()) set_song_preference); ;
 scm_c_define_gsubr (s_trigger, 4, 0, 0, (SCM (*)()) trigger); ;
 scm_c_define_gsubr (s_smart_trigger, 5, 0, 0, (SCM (*)()) smart_trigger); ;
 scm_c_define_gsubr (s_on_event, 3, 0, 0, (SCM (*)()) on_event); ;
 scm_c_define_gsubr (s_get_event_callback, 2, 0, 0, (SCM (*)()) get_event_callback); ;
 s_mod_speed = scm_permanent_object (scm_c_define ("*mod-speed*", scm_from_long(0))); ;
 s_mod_jump = scm_permanent_object (scm_c_define ("*mod-jump*", scm_from_long(1))); ;
 s_mod_spike = scm_permanent_object (scm_c_define ("*mod-spike*", scm_from_long(2))); ;
 s_mod_glass = scm_permanent_object (scm_c_define ("*mod-glass*", scm_from_long(3))); ;
 s_mod_dizzy = scm_permanent_object (scm_c_define ("*mod-dizzy*", scm_from_long(4))); ;
 s_mod_frozen = scm_permanent_object (scm_c_define ("*mod-frozen*", scm_from_long(5))); ;
 s_mod_float = scm_permanent_object (scm_c_define ("*mod-float*", scm_from_long(6))); ;
 s_mod_extra_life = scm_permanent_object (scm_c_define ("*mod-extra-life*", scm_from_long(7))); ;
 s_mod_large = scm_permanent_object (scm_c_define ("*mod-large*", scm_from_long(9))); ;
 s_mod_small = scm_permanent_object (scm_c_define ("*mod-small*", scm_from_long(8))); ;
 s_mod_nitro = scm_permanent_object (scm_c_define ("*mod-nitro*", scm_from_long(10))); ;
 s_easy = scm_permanent_object (scm_c_define ("*easy*", scm_from_long(0))); ;
 s_normal = scm_permanent_object (scm_c_define ("*normal*", scm_from_long(1))); ;
 s_hard = scm_permanent_object (scm_c_define ("*hard*", scm_from_long(2))); ;
 s_ff_nothing = scm_permanent_object (scm_c_define ("*ff-nothing*", scm_from_long(0))); ;
 s_ff_kill1 = scm_permanent_object (scm_c_define ("*ff-kill1*", scm_from_long(1))); ;
 s_ff_bounce1 = scm_permanent_object (scm_c_define ("*ff-bounce1*", scm_from_long(2))); ;
 s_ff_kill2 = scm_permanent_object (scm_c_define ("*ff-kill2*", scm_from_long(4))); ;
 s_ff_bounce2 = scm_permanent_object (scm_c_define ("*ff-bounce2*", scm_from_long(8))); ;
 s_ff_bounce = scm_permanent_object (scm_c_define ("*ff-bounce*", scm_from_long(2 +8))); ;
 s_ff_kill = scm_permanent_object (scm_c_define ("*ff-kill*", scm_from_long(1 +4))); ;
 s_soft_enter = scm_permanent_object (scm_c_define ("*soft-enter*", scm_from_long(1))); ;
 s_soft_exit = scm_permanent_object (scm_c_define ("*soft-exit*", scm_from_long(2))); ;
 s_cell_ice = scm_permanent_object (scm_c_define ("*cell-ice*", scm_from_long((1 << 0)))); ;
 s_cell_acid = scm_permanent_object (scm_c_define ("*cell-acid*", scm_from_long((1 << 1)))); ;
 s_cell_sand = scm_permanent_object (scm_c_define ("*cell-sand*", scm_from_long((1 << 2)))); ;
 s_cell_kill = scm_permanent_object (scm_c_define ("*cell-kill*", scm_from_long((1 << 3)))); ;
 s_cell_trampoline = scm_permanent_object (scm_c_define ("*cell-trampoline*", scm_from_long((1 << 4)))); ;
 s_cell_nogrid = scm_permanent_object (scm_c_define ("*cell-nogrid*", scm_from_long((1 << 5)))); ;
 s_cell_track = scm_permanent_object (scm_c_define ("*cell-track*", scm_from_long((1 << 6)))); ;
 s_animator_0_remove = scm_permanent_object (scm_c_define ("*animator-0-remove*", scm_from_long(1))); ;
 s_animator_0_stop = scm_permanent_object (scm_c_define ("*animator-0-stop*", scm_from_long(2))); ;
 s_animator_0_bounce = scm_permanent_object (scm_c_define ("*animator-0-bounce*", scm_from_long(4))); ;
 s_animator_0_wrap = scm_permanent_object (scm_c_define ("*animator-0-wrap*", scm_from_long(8))); ;
 s_animator_1_remove = scm_permanent_object (scm_c_define ("*animator-1-remove*", scm_from_long(16))); ;
 s_animator_1_stop = scm_permanent_object (scm_c_define ("*animator-1-stop*", scm_from_long(32))); ;
 s_animator_1_bounce = scm_permanent_object (scm_c_define ("*animator-1-bounce*", scm_from_long(64))); ;
 s_animator_1_wrap = scm_permanent_object (scm_c_define ("*animator-1-wrap*", scm_from_long(128))); ;
 s_animator_remove = scm_permanent_object (scm_c_define ("*animator-remove*", scm_from_long(1 +16))); ;
 s_animator_stop = scm_permanent_object (scm_c_define ("*animator-stop*", scm_from_long(2 +32))); ;
 s_animator_wrap = scm_permanent_object (scm_c_define ("*animator-bounce*", scm_from_long(4 +64))); ;
 s_animator_bounce = scm_permanent_object (scm_c_define ("*animator-wrap*", scm_from_long(8 +128))); ;
 s_cell_ne = scm_permanent_object (scm_c_define ("*cell-ne*", scm_from_long(Cell::NORTH+Cell::EAST))); ;
 s_cell_nw = scm_permanent_object (scm_c_define ("*cell-nw*", scm_from_long(Cell::NORTH+Cell::WEST))); ;
 s_cell_se = scm_permanent_object (scm_c_define ("*cell-se*", scm_from_long(Cell::SOUTH+Cell::EAST))); ;
 s_cell_sw = scm_permanent_object (scm_c_define ("*cell-sw*", scm_from_long(Cell::SOUTH+Cell::WEST))); ;
 s_cell_center = scm_permanent_object (scm_c_define ("*cell-center*", scm_from_long(Cell::CENTER))); ;
 s_bird_ch = scm_permanent_object (scm_c_define ("*bird-constant-height*", scm_from_long(1))); ;
 s_event_death = scm_permanent_object (scm_c_define ("*death*", scm_from_long(GameHookEvent_Death))); ;
 s_event_spawn = scm_permanent_object (scm_c_define ("*spawn*", scm_from_long(GameHookEvent_Spawn))); ;
 s_event_tick = scm_permanent_object (scm_c_define ("*tick*", scm_from_long(GameHookEvent_Tick))); ;
 s_score_player = scm_permanent_object (scm_c_define ("*score-player*", scm_from_long(0))); ;
 s_score_black = scm_permanent_object (scm_c_define ("*score-black*", scm_from_long(1))); ;
 s_score_baby = scm_permanent_object (scm_c_define ("*score-baby*", scm_from_long(2))); ;
 s_score_bird = scm_permanent_object (scm_c_define ("*score-bird*", scm_from_long(3))); ;
 s_score_cactus = scm_permanent_object (scm_c_define ("*score-cactus*", scm_from_long(4))); ;
 s_score_flag = scm_permanent_object (scm_c_define ("*score-flag*", scm_from_long(5))); ;
